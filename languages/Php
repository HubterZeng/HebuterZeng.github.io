##特点：弱类型语言

##变量
定义： $+变量名 ：  $var_1  , $_var2       区分大小写，  变量名开头字符为字母或者下划线
变量的作用域： 局部变量，全局变量（在函数内访问需要使用global），静态变量（可以提升局部变量的作用域），参数作用域。
$x=5;
$y=10;
function myTest()
{
    global $x
    $y=$x+$y;
}
##Php 数据类型 
：String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。
 --------------------------
 Array（数组）
PHP 中的数组实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。
此类型在很多方面做了优化，因此可以把它当成真正的数组，或列表（向量），散列表（是映射的一种实现），字典，集合，栈，队列以及更多可能性。
由于数组元素的值也可以是另一个数组，树形结构和多维数组也是允许的。
----
** ** Note
<?php
$array = array(
    1    => "a",
    "1"  => "b",
    1.5  => "c",
    true => "d",
);
var_dump($array);
?>
****
输出
array(1) {
  [1]=>
  string(1) "d"
}
上例中所有的键名都被强制转换为 1，则每一个新单元都会覆盖前一个的值，最后剩下的只有一个 "d"。
****
$arr = array(5 => 1, 12 => 2);
要修改某个值，通过其键名给该单元赋一个新值。要删除某键值对，对其调用 unset() 函数。
unset($arr[5]); // This removes the element from the array
unset($arr);    // This deletes the whole array
-----------------------
修改数组中的元素
foreach ($colors as $key => $color) {
    $colors[$key] = strtoupper($color);
}
-----------



















##常量定义：
define ( string $name , mixed $value [, bool $case_insensitive = false ] )
eg： define("GREETING", "欢迎访问 Runoob.com", true);//true代表对大小写不敏感。
常量的作用域是全局的

###魔术常量
PHP 向它运行的任何脚本提供了大量的预定义常量
————line__  文件中的当前行号
__file__    文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名
__dir__     文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录
__function__ 函数名称
__class__ 类名称


##超级全局变量
$GLOBALS  ：$GLOBALS 是PHP的一个超级全局变量组
$_SERVER  :$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。(https://www.runoob.com/php/php-superglobals.html)
$_REQUEST :$_REQUEST 用于收集HTML表单提交的数据
$_POST    : $_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性："method="post"。
$_GET     : $_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性："method="get"。  
$_FILES   :
$_ENV
$_COOKIE
$_SESSION

例子：
<form action="welcome.php" method="get">
名字: <input type="text" name="fname">
年龄: <input type="text" name="age">
<input type="submit" value="提交">
</form>
使用：
欢迎 <?php echo $_GET["fname"]; ?>





##输出到控制台：
$cars=array("Volvo","BMW","Toyota");

echo - 可以输出一个或多个字符串
echo "这是一个", "字符串，", "使用了", "多个", "参数。";
echo "我车的品牌是 {$cars[0]}";

print - 只允许输出一个字符串，返回值总为 1
print "我车的品牌是 {$cars[0]}";


##类型比较
==，===

##算数运算符
并置（连接两个字符串） 	"Hi" . "Ha  ->	HiHa



##PhP数组
数组创建:使用array()函数创建

数组类型：
   数值数组 - 带有数字 ID 键的数组
   $cars=array("Volvo","BMW","Toyota")
   关联数组 - 带有指定的键的数组，每个键关联一个值
   $age=array("Peter"=>"35","Ben"=>"37","Joe"=>"43");
   多维数组 - 包含一个或多个数组的数组
   
获取数组的长度 count（）
遍历数组：for,foreach
eg:
for($x=0;$x<$arrlength;$x++)
{
    echo $cars[$x];
    echo "<br>";
}
foreach($age as $x=>$x_value)
{
    echo "Key=" . $x . ", Value=" . $x_value;
    echo "<br>";
}//每进行一次循环，当前数组元素的值就会被赋值给 $x 变量（数组指针会逐一地移动）


##数组排序
sort() - 对数组进行升序排列
rsort() - 对数组进行降序排列
asort() - 根据关联数组的值，对数组进行升序排列
ksort() - 根据关联数组的键，对数组进行升序排列
arsort() - 根据关联数组的值，对数组进行降序排列
krsort() - 根据关联数组的键，对数组进行降序排列

eg:
$numbers=array(4,6,2,22,11);
sort($numbers);

##函数
PHP 函数准则：函数的名称应该提示出它的功能，函数名称以字母或下划线开头
function add($x,$y)
{
    $total=$x+$y;
    return $total;//需要返回值时，写return
}

##php sessione
启动会话： session_start()
存储数据到session  $_SESSION['username']="zenglingcheng"
取数据： $_SESSION['username']
isset() 函数检测是否已设置 "username" 变量 .    eg:isset($_SESSION['username'])
撤销某些session数据  unset($_SESSION['username'])
销毁会话： session_destroy()




























##php Json
###json函数
json_encode（），对变量进行 JSON 编码
json_decode（），对 JSON 格式的字符串进行解码，转换为 PHP 变量
json_last_erro（），返回最后发生的错误
eg:
语法
string json_encode ( $value [, $options = 0 ] )
示例:数组转JSON
$arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);
echo json_encode($arr);
执行结果：{"a":1,"b":2,"c":3,"d":4,"e":5}
示例:对象转JSON
 class Emp {
       public $name = "";
       public $hobbies  = "";
       public $birthdate = "";
   }
   $e = new Emp();
   $e->name = "sachin";
   $e->hobbies  = "sports";
   $e->birthdate = date('m/d/Y h:i:s a', "8/5/1974 12:20:03 p");
   $e->birthdate = date('m/d/Y h:i:s a', strtotime("8/5/1974 12:20:03"));

   echo json_encode($e);
执行结果：{"name":"sachin","hobbies":"sports","birthdate":"08\/05\/1974 12:20:03 pm"}



##   函数模块
----   explode('/', $url)[0];
explode(separator,string,limit)
参数	描述
separator	必需。规定在哪里分割字符串。
string	必需。要分割的字符串。
limit	
可选。规定所返回的数组元素的数目。

可能的值：

大于 0 - 返回包含最多 limit 个元素的数组
小于 0 - 返回包含除了最后的 -limit 个元素以外的所有元素的数组
0 - 返回包含一个元素的数组


---- list() 函数用数组中的元素为一组变量赋值

在访问PHP类中的成员变量或方法时，如果被引用的变量或者方法被声明成const（定义常量）或者static（声明静态）,那么就必须使用操作符::,
反之如果被引用的变量或者方法没有被声明成const或者static,那么就必须使用操作符->。
另外，如果从类的内部访问const或者static变量或者方法,那么就必须使用自引用的self，
反之如果从类的内部访问不为const或者static变量或者方法,那么就必须使用自引用的$this。
结论 : self与$this的功能极其相似，但二者又不相同。$this不能引用静态成员和常量。self更像类本事，而$this更像是实例本身。

-------------------------------
运算符
字符串运算符
<?php
$a = "Hello ";
$b = $a . "World!"; // now $b contains "Hello World!"

$a = "Hello ";
$a .= "World!";     // now $a contains "Hello World!"
?>

-------------
数组运算符
$a + $b	联合	$a 和 $b 的联合。
$a == $b	相等	如果 $a 和 $b 具有相同的键／值对则为 TRUE。
$a === $b	全等	如果 $a 和 $b 具有相同的键／值对并且顺序和类型都相同则为 TRUE。
$a != $b	不等	如果 $a 不等于 $b 则为 TRUE。
$a <> $b	不等	如果 $a 不等于 $b 则为 TRUE。
$a !== $b	不全等	如果 $a 不全等于 $b 则为 TRUE。
----------------------------
类型运算符
instance of 
-------------------
多个php文件
require 和 include 几乎完全一样，除了处理失败的方式不同之外。
require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include 只产生警告（E_WARNING），脚本会继续运行
require_once 语句和 require 语句完全相同，唯一区别是 PHP 会检查该文件是否已经被包含过，如果是则不会再次包含
---------------------
foreach 语法结构提供了遍历数组的简单方式。foreach 仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。有两种语法：

foreach (array_expression as $value)
    statement
foreach (array_expression as $key => $value)
    statement
第一种格式遍历给定的 array_expression 数组。每次循环中，当前单元的值被赋给 $value 并且数组内部的指针向前移一步（因此下一次循环中将会得到下一个单元）。

第二种格式做同样的事，只除了当前单元的键名也会在每次循环中被赋给变量 $key。

还能够自定义遍历对象。


