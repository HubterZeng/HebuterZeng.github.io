##  java区分大小写
##  访问修饰符，用来控制程序的其他部分对这段代码的访问级别
##  class ,作为加载程序逻辑的容器
##  类名 ，骆驼命名法;源代码的文件名必须与公共类的类名相同（区分大小写），并用.java作为扩展名。
##  字节码文件 xxxx.class
##  java虚拟机从指定类的main（）方法出，开始执行。
## javaSE 1.4版本后  main（）方法必须为public
##  main（）方法必须是静态的 。
##  main()方法正常返回，返回值是0；如果需要在程序成功执行时，返回其他的代码，需要调用System.exit方法
##  语句结束的标志是；，因此可以利用回车将一个语句写在多行。

public class FirstSample{
    public static void main(String[] args){
           System.out.println("We will not use 'Hello, World! "') ;
      }
}
java基本的程序设计结构

##  注释
--行注释 //
--多行 /* */
--自动生成文档的注释类型：   /**   */

## 数据类型
--强类型语言，包括4种整型，两种浮点型，布尔类型  和 Unicode编码的字符类型char
--16进制 ： 0x11=17  Java7以后 二进制： 0B1001=9  可以为数字字面常量加下划线1_000_000（只是为了易于读，java编译器会去掉下划线）
--数值计算中要求没有任何舍入误差，应该使用BigDemical类
--char数据类型是一个采用UTF-16编码表示的Unicode码点的代码单元。
--char类型的字面常量需要用''括起来，如'A',char类型的值亦可以表示为十六进制的值，范围从\u0000--\Uffff
--可以出现在char或者字符串中的转义序列
--boolean类型的值有两个 true,false.整型值和布尔值不能相互转化。

##变量
--在声明一个变量后，必须用赋值语句显示的初始化。
--常量 利用关键字final指示常量
--数学函数与常量（Math类中的所有方法，都使用了计算机中的浮点单元中的例程来优化计算的速度。StrictMath类的使用）。


##运算符
关系运算，位运算

##    枚举类型，变量的取值只在一个有限的集合内。
--自定义枚举类型  enum Size {SMALL,MEDIUM,LARGE}
  Size类型的变量，将只能存放这个类型声明中的某个枚举值。 Size s = Size.SMALL;


##    字符串
从概念上来讲，java字符串就是unicode字符序列
--空串是一个Java对象，有自己的串长度和内容。null表示没有任何对象与该变量关联。
  tips:先判断字符串是否为null,再判断字符串是否为空串。（null值上调用方法，会产生错误（Errors））

  
##    数组  
--   获得数组中元素的个数： array.length
--   java中允许数组的长度是0.  new elements[0]
-- for each 循环
for(var :collectio) statement
collection 这一集合表达式必须是一个数组或者是一个实现了 Iterable 接口的类对象
用 Arrays.toString(a), 返回一个包含数组元素的字符串，这些元素被放置在括号内， 并用逗号分隔
----------------
-- 数组的深拷贝  
int[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers , luckyNumbers .length);
第一个参数是原数组的引用,第 2 个参数是新数组的长度
-----------------------------------------------

##   类
--   类的访问权限
数据不对----谁动了数据---谁能懂数据---权限告诉你。
--   辅助方法设计为私有的方法
--   类的方法可以调用任何一个对象的私有数据。
public class DateFormate {
    private String str="123";
     public boolean equals(DateFormate dateFormate){
        return str.equals(dateFormate.str);
    }
    public static void main(String ag[]){
        DateFormate dateFormate = new DateFormate();
        DateFormate dateFormate1=  new DateFormate();
        System.out.println(dateFormate.equals(dateFormate1));   -- true
    }
}
--------------------------------------------------------
String 类的 equals()源码
 public boolean equals(Object anObject) {
        if (this == anObject) {
            return true;
        }
        if (anObject instanceof String) {
            String anotherString = (String)anObject;
            int n = value.length;
            if (n == anotherString.value.length) {
                char v1[] = value;
                char v2[] = anotherString.value;
                int i = 0;
                while (n-- != 0) {
                    if (v1[i] != v2[i])
                        return false;
                    i++;
                }
                return true;
            }
        }
        return false;
    }
   --------------------------------------- ----------------------
--    final实例域
实例域定义为 final。 构建对象时必须初始化这样的域。
也就是说， 必须确保在每一个构造器执行之后，这个域的值被设置， 并且在后面的操作中， 不能够再对它进行修改。

--    静态域
如果将域定义为 static, 每个类中只有一个这样的域。而每一个对象对于所有的实例域却都有自己的一份拷贝。
--    静态方法不能访问实例域（null）
--    this引用了方法的隐式参数，即调用方法本身的对象。也可以在构造器中调用另一个构造器。
      
---------
初始化数据的方法：
-- 1：在构造器中设置
-- 2：在声明中赋值
-- 3： 初始化块（只要构造类的对象，这部分代码就执行）。先执行构造块，再执行构造器。
    public class DateFormate {
    private int i;
    private  int j;
    --------------
    {
        i=1;
    } //初始化块
------------------
public DateFormate(){
        this.j=i;
    }
    public void show(){
        System.out.println(this.i+this.j);
    }
    public static void main(String ag[]){
      DateFormate dateFormate =new DateFormate();
      dateFormate.show();  -- 2
    }

}
-------- ---------------------
 构造器执行过程
 -- ：所有数据域被初始化为默认值
 -- ：按照在类声明中出现的次序， 依次执行所有域初始化语句和初始化块   
 -- ：如果构造器第一行调用了第二个构造器，则执行第二个构造器主体   
 -- ：执行这个构造器的主体. -  
------------  --------    ---------
    
    
    
 ##   类路径
 类存储在文件系统的子目录中。类的路径必须与包名匹配。
 package com.haodf.service;
 public class DateFormate  类的存储路径对于报包名的要求。
 
 
 ------------------------
 注释的抽取
 --  切换到包含想要生成文档的源文件目录
 --  如果是一个包，应该运行命令:
javadoc -d docDirectory nameOfPackage     
------------     ------------------------- 
控制可见性的访问修饰符
1 ) 仅对本类可见 private。
2 ) 对所有类可见 public：
3 ) 对本包和所有子类可见 protected。
4 ) 对本包可见—默认（很遗憾，) 不需要修饰符。      
-----------------------------------------------------
Object 类的理解
--  所有的数组类塱，不管是对象数组还是基本类型的数组都扩展了 Object 类
Employee[] staff = new Employee[10];
obj = staff; // OK
obj = new int[10]; // OK      
方法：equals(),hashCode(),toString()
------------------------------ 
变长参数，放在参数列表的最后一个。
public static double max (double... values)
      
      
      
      
      
      
      
      
