页面显示部分
注册：  常用的事件  change(),blur()
正则用法：
$("#username").change(function () {
    var str = /^[A-Za-z0-9]{6,12}$/;
    if (!str.test($("#username").val())) {
     alert("验证错误，账号只能是数字字母组成的6-12位长度的字符串");
    } 
})
表单中的input name属性是用来提交表单用的。 id是供选择器使用
input的类型常用的有文本输入text,密码输入password,按钮 button,单选 radio
输入框的占位符 属性 placeholder
<input id="password"  name="password" type="password">

商品首页：
result=[
        {
            "createTime":"1559201366",
            "updateTime":"1559202443",
            "id":"6671607349",
            "sellerId":"6671657308",
            "productName":"1",
            "productQuantity":"152",
            "productPrice":"11",
            "productDescription":"111",
            "listingState":"1"
        }
]
循环对象数组的方法
 $.each(result, function (index, obj) {})
 
 

动态添加dom：
   $.each(result, function (index, obj) {
                    $("#products").append(
                        '<div id="'+obj.id+'" class="text">'
                        + '<div class="brand">"您的ID'+obj.userID+'"</div>'
                        +'<span class="intro">新能源汽车五座座小型轿车五座汽车五座小型轿车五座汽车</span>'
                        +'<span class="spay">应付账款￥/span>'
                        +'<span class="pay">实际付款：￥330.000</span>'
                    +'</div>"');
                });
 动态添加的元素必须在添加的时候绑定。否则根据浏览器的工作机制事件是绑定不上的。         
  var tr = ("<tr  id='" + product.id + "'>" + "<td><input  type=\"checkbox\"  name=\"test\"/></td>"
    + "<td contenteditable='true' onblur='blurEvent(this)' >" + product.productName + "</td>"
    + "<td contenteditable='true' onblur='blurEvent(this)' >" + product.productPrice + "</td>"
    + "<td contenteditable='true' onblur='blurEvent(this)' >" + product.productDescription + "</td>"
    + "<td contenteditable='true' onblur='blurEvent(this)'>" + product.productQuantity + "</td>"
    + "<td><button id='delete' onclick='deleteProduct(this)' class=\"tr-line\" >delete</button></td>"
    + "<td><button id='offline'onclick='offline(this)' class=\"tr-line\" >offline</button></td>"
    + "<td><button id='online' onclick='online(this)' class=\"tr-line\" >online</button></td>"
    + "</tr>");
$("table").append(tr);

购物车页面部分：
result=[
    {
        "cartDO":{
            "createTime":"1559203677",
            "updateTime":"1559203677",
            "id":"6671677373",
            "userId":"6671657313",
            "productId":"6671607349",
            "buyQuantity":"1"
        },
        "productDO":{
            "createTime":"1559201366",
            "updateTime":"1559202443",
            "id":"6671607349",
            "sellerId":"6671657308",
            "productName":"1",
            "productQuantity":"152",
            "productPrice":"11",
            "productDescription":"111",
            "listingState":"1"
        }
    }
]
嵌套对象的访问
访问：
 $.each(result, function (index, obj) {
        console.log(obj.cartDO.id);
 })
JS的数组，支持push,pop.
 var checked=[];

 ajax传递对象时，需要使用JSON.stringify(checked)来序列化对象，使其变为字符串。
 $.ajax({
    url:"ajaxCreateOrder",
        type:'post',
        data:{
            'cartIds':JSON.stringify(checked)
        },
        dataType:'json',
        async:'false',
        success:function(res){
            result=res;
            console.log("create order");
            url = "http:xxxxxxxxxxxxxxxxxxxxxx";
            window.location.href = url;
        }
        });

新订单
result={
    "createTime":"1559204109",
    "updateTime":"1559204109",
    "id":"6671687311",
    "userId":"6671657313",
    "details":"商品名称：1商品ID: 6671607349卖家ID: 6671657308商品描述: 111商品单价: 11.0购买数量:CartDO(id=6671677373, userId=6671657313, productId=6671607349, buyQuantity=1)",
    "sumPrice":"11",
    "visualState":"1"
}
访问方法
 success:function(res){
    // result=JSON.parse(res);
    var result=res;
    $("#orders").append(
        '<div id="'+result.id+'" onclick="pay(this)"class="text">'
        + '<div class="brand">"您的ID  '+result.userId+'"</div>'
        +'<span class="intro">"您的详情  '+result.details+'"</span>'
        +'<br>'
        +'<span class="pay">付款：￥'+result.sumPrice+'</span>'
        +'<button id="payButton" >PAY FOR THIS ORDER</buton>'
        +'</div>"');
}



 商品管理页面
<!DOCTYPE html>
    2 <html lang="en">
    3 
    4 <head>
    5     <meta charset="UTF-8">
    6     <title>Title</title>
    7     <style>
    8         table {
    9             border-collapse: collapse;
   10             width: 500px;
   11             text-align: center;
   12             background-color: paleturquoise;
   13         }
   14 
   15         .odd {
   16             background-color: #ffc;
   17 
   18         }
   19         .new{
   20           background-color:#fff;
   21           }
   22     </style>
   23 
   24 
   25 </head>
   26 
   27 <body>
   28 
   29     <table border="1" id="tab">
   30 
   31         <tr>
   32             <th><input type="checkbox">select all</th>
   33             <th>productName</th>
   34             <th>productPrice</th>
   35             <th>productDescription</th>
   36              <th>productQuantity</th>
   37             <th>删除</th>
   38             <th>上线</th>
   39             <th>下线</th>
   40 
   41         </tr>
   42 
   43     </table><br>
   44     productName:<input type="text" id="productName">
   45     productPrice:<input type="text" id="productPrice">
   46     productDescription:<input type="text" id="productDescription">
   47     productQuantity:<input type="text" id="productQuantity">
   48     <input type="button" value="add" id="add">
   49     <input type="button" value="select" id="delete">
   50     <input type="button" value="submit modify" id="modifyValue"  onclick="modifyValue()">
   52 <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
   53 <script>
   54 
   55 
   56 var productArray = new Array();
   57 var productIds=[];
   58 var newPro=new Array(); 
   59 function modifyValue(){
   60 
   61     $.ajax({
   62         url:"ajaxUpdateProducts",
   63             contentType: "application/json;charset=UTF-8",
   64             data:{
   65                 'products':JSON.stringify(productArray),
   66             },
   67             success:function(){
   68                 console.log("sumbit success");
   69             }
   70     });
   71 }
   72 $("#add").click(function () {
   73     var productName = $("#productName").val();
   74     var productPrice = $("#productPrice").val();
   75     var productDescription = $("#productDescription").val();
   76     var productQuantity=$("#productQuantity").val();
   77     $.ajax({
   78         url: "ajaxAddProduct",
   79             data: {
   80                 'productName': productName,
   81                     'productPrice': productPrice,
   82                     'productDescription': productDescription,
   83                     'productQuantity':productQuantity
   84             },
   85             success: function (res) {
   86                 var product = new Product();
   87                 var res1=JSON.parse(res);
   88                 product.setListingState(true);
   89                 product.setProductDescription(res1.productDescription);
   90                 product.setProductPrice(res1.productPrice);
   91                 product.setProductQuantity(res1.productQuantity);
   92                 product.setProductId(res1.id);
   93                 product.setProductSellerId(res1.sellerId);
   94                 product.setProductName(res1.productName);
   95                 productArray.push(product);
   96 
   97                 var tr = ("<tr  id='" + product.id + "'>" + "<td><input  type=\"checkbox\"  name=\"test\"/></td>"
   98                     + "<td contenteditable='true' onblur='blurEvent(this)' >" + product.productName + "</td>"
   99                     + "<td contenteditable='true' onblur='blurEvent(this)' >" + product.productPrice + "</td>"
  100                     + "<td contenteditable='true' onblur='blurEvent(this)' >" + product.productDescription + "</td>"
  101                     + "<td contenteditable='true' onblur='blurEvent(this)'>" + product.productQuantity + "</td>"
  102                     + "<td><button id='delete' onclick='deleteProduct(this)' class=\"tr-line\" >delete</button></td>"
  103                     + "<td><button id='offline'onclick='offline(this)' class=\"tr-line\" >offline</button></td>"
  104                     + "<td><button id='online' onclick='online(this)' class=\"tr-line\" >online</button></td>"
  105 
  106                     + "</tr>");
  107                 $("table").append(tr);
  108             }
  109     })
  110 
  111 })
  112 
  113 
  114 
  115 
  116 
  117 
  118 function Product(_id, _sellerId, _productName, _productPrice, _productDescription, _listingState,_quantity) {
  119     this.productName = _productName;
  120     this.productPrice = _productPrice;
  121     this.productDescription = _productDescription;
  122     this.productQuantity=_quantity;
  123     this.listingState = _listingState;
  124     this.id = _id;
  125     var sellerId = _sellerId;
  126 }//var 是私有属性  this.是公有属性。  通过构造函数的方式，每一个对象单独拥有一份数据
  127 //采用原型的方式，使得一份方法的存储被所有类的对象使用。
  128 Product.prototype.setProductName = function (name) {
  129     this.productName = name;
  130 }
  131 Product.prototype.setProductId = function (_id) {
  132     this.id = _id;
  133 }
  134 Product.prototype.setProductSellerId = function (_sellerId) {
  135     this.sellerId =_sellerId;
  136 }
  137 Product.prototype.setProductPrice = function (price) {
  138     this.productPrice = price;
  139 }
  140 Product.prototype.setProductDescription = function (description) {
  141     this.productDescription = description;
  142 }
  143 Product.prototype.setListingState = function (listingState) {
  144     this.listingState = listingState;
  145 }
  146 Product.prototype.setProductQuantity=function(productQuantity){
  147     this.productQuantity=productQuantity;
  148 }
  149 $("input:eq(0)").bind("click", function () {
  150     $("input").prop("checked", $(this).prop("checked"));
  151 })
  152 
  153     $("table td").dblclick(function () {
  154         $(this).attr("contenteditable", "true");
  155     });
  156 
  157       var myMap=new Map();
  158       myMap.set(1,"productName");
  159       myMap.set(2,"productPrice");
  160       myMap.set(3,"productDescription");
  161       myMap.set(4,"productQuantity");
  162 
  163 
  164 
  165          function blurEvent (context) {
  166             var value=context.textContent;
  167             var id=context.parentElement.id;
  168             console.log(id);
  169             console.log(value);
  170             for(let i=0;i<productArray.length;i++){
  171                 if(productArray[i].id==id){
  172                     var index=context.cellIndex;
  173                     var prop=myMap.get(index);
  174                     productArray[i][prop]=value;
  175                 
  176                 }
  177             
  178             }
  179 
  180             
  181         }
  182 
  183 
  184 function deleteProduct(context){
  185     var id = context.parentElement.parentElement.id
  186         console.log(id);
  187     $.ajax({
  188         url: "ajaxDeleteProduct",
  189             data: {
  190                 'productId': id
  191             },
  192             success: function () {
  193                 console.log("delete it from my products");
  194                 context.parentElement.parentElement.remove()
  195             }
  196     });
  197 
  198 
  199 }
  200 
  201 $("#delete").on("click", function () {
  202     var id = $(this).parents("tr").id;
  203     $.ajax({
  204         url: "ajaxDeleteProduct",
  205             data: {
  206                 'productId': id
  207             },
  208             success: function () {
  209                 console.log("delete it from my products");
  210                 $(this).parents("tr").remove();
  211             }
  212     });
  213     //var s = $(this).parents("tr").find("td").eq(2).text();
  214     //var s=$(this).parents("tr").text();?峰𹣭涓琛𸰿𼓛?𷀿?广?
  215     //console.log(s);
  216 
  217 });
  218 function offline(context){
  219     var listingState=false;
  220     var id = context.parentElement.parentElement.id
  221 
  222         console.log(id);
  223     $.ajax({
  224         url: "ajaxUpdateProductOnline",
  225             data: {
  226                 'productId': id,
227                     'listingState': listingState
  228             },
  229             success: function () {
  230                 context.parentElement.parentElement.className='odd';
  231             }
  232     });
  233 
  234 
  235 }
  236 
  237 function online(context){
  238     var listingState=true;
  239     var id = context.parentElement.parentElement.id
  240 
  241         $.ajax({
  242             url: "ajaxUpdateProductOnline",
  243                 data: {
  244                     'productId': id,
  245                         'listingState': listingState
  246                 },
  247                 success: function () {
  248                     context.parentElement.parentElement.className='new';
  249                 }
  250         });
  251 
  252 
  253 }
  254 $("input[type='button']").click(function () {
  255     $("input[name='test']:checked").each(function () {
  256         var num = $(this).parents("tr").index();
  257         $("table").find("tr:eq(" + num + ")").remove();
  258     });
  259 });
  260 
  261 
  262 
  263 
  264 </script>
  265 </body>
  266 
  267 </html>




 
 
 
 
